Verified Boot on the ARTIK
=====================================

Introduction
------------

Before reading this, please read verified-boot.txt and signature.txt. These
instructions are for mainline U-Boot from v2014.07 onwards.

There is quite a bit of documentation in this directory describing how
verified boot works in U-Boot. There is also a test which runs through the
entire process of signing an image and running U-Boot (sandbox) to check it.

First a note that may to help avoid confusion. U-Boot and Linux both use
device tree. They may use the same device tree source, but it is seldom useful
for them to use the exact same binary from the same place. More typically,
U-Boot has its device tree packaged wtih it, and the kernel's device tree is
packaged with the kernel. In particular this is important with verified boot,
since U-Boot's device tree must be immutable. If it can be changed then the
public keys can be changed and verified boot is useless. An attacker can
simply generate a new key and put his public key into U-Boot so that
everything verifies. On the other hand the kernel's device tree typically
changes when the kernel changes, so it is useful to package an updated device
tree with the kernel binary. U-Boot supports the latter with its flexible FIT
format (Flat Image Tree).


Overview
--------

The steps are roughly as follows:

1. Build Environment

2. Create a key pair

3. Build with Verified Boot

4. Put U-Boot and the Kernel onto the board

5. Try it


Step 1: Build Environment(library installation)
-----------------------------------------------

Verified Boot uses openssl library.
If you see the error log below,

   u-boot/lib/rsa/rsa-sign.c:26:25: fatal error: openssl/rsa.h: No such
file or directory

you need to install libssl-dev using apt-get.

   # sudo apt-get install libssl-dev


Step 2: Create a key pair
-------------------------

See signature.txt for details on this step.
Goto your working directory.

   mkdir keys
   export KEYF=`pwd`/keys
   openssl genrsa -F4 -out keys/dev.key 2048
   openssl req -batch -new -x509 -key keys/dev.key -out keys/dev.crt

Note: keys/dev.key contains your private key and is very secret. If anyone gets
access to that file they can sign kernels with it. Keep it secure. If you want
to change the file name from "dev" to another, you need to edit key-name-hint of
"artik_signature.dts" file.


Step 3: Build with Verified Boot
--------------------------------

You need to put some more argument like below.
(Please use your model config file. This example uses artik5.)

   # ./release.sh -c config/artik5.cfg --vboot --vboot-keydir ${KEYF}

Or if you have your own its file then,

   # ./release.sh -c config/artik5.cfg --vboot --vboot-keydir ${KEYF}
 --vboot-its {your its file}


Step 4. Put U-Boot, env and the Kernel onto the board
------------------------------------------------

This is guided in another channel. Please refer to the manual.
Shortly, you can use the commands below.

   # fastboot flash env params.bin
   # fastboot flash bootloader u-boot.bin
   # fastboot flash kernel zImage

Or simply,

   # flash_all_by_fastboot.sh


Step 5. Try it
---------

You should see something like this:

Saving Environment to MMC...
Writing to MMC(0)... done
ARTIK5 # run boot_cmd_initrd
reading zImage
4932258 bytes read in 19455 ms (247.1 KiB/s)
reading exynos3250-artik5.dtb
40794 bytes read in 15322 ms (2 KiB/s)
reading uInitrd
1353683 bytes read in 28026 ms (46.9 KiB/s)
## Loading kernel from FIT Image at 42000000 ...
   Using 'conf@1' configuration
   Verifying Hash Integrity ... OK
   Trying 'kernel@1' kernel subimage
     Description:  Linux kernel
     Type:         Kernel Image
     Compression:  uncompressed
     Data Start:   0x420000e8
     Data Size:    4888544 Bytes = 4.7 MiB
     Architecture: ARM
     OS:           Linux
     Load Address: 0x40008000
     Entry Point:  0x40008000
     Hash algo:    sha1
     Hash value:   6660d51090468f1b458fe6f1a601919aa0324dc2
     Sign algo:    sha1,rsa2048:dev
     Sign value:   6bd88a7a9d0493361b6ca9602a90f376ff62a220a38d85cee39e72cea4757
b0a4bd49e5c041c96bdf1286a1a7e206258b9327dec225af6512ecbe3e682b6d6c6e9a1b82fdadc5
3076b56af5ac3f7d4db25657f9f5ab2cff8c657bbb48b23f6d26b7da4f97ebde8b6cb1a01cf6d653
004ff2f6317d6bd644dfee526892504c0cec2004d69da0beb9492be7ffc2c589c371fcf4fca6b06f
523ab4e8c514225c70319a8ab08baf9e3dbc48d9240e8883a898bc357a7b03115c0e1199def590e8
c91bb2d7937bf5dd59650e4b4c1a0c78946a50e12d496aa4536d38a0870568fba4fe6abcd5e528bb
393ea860aded9d42c147b8a672e41d3aac558781c231fbb9645
   Verifying Hash Integrity ... sha1,rsa2048:dev+ sha1+ OK
## Loading fdt from FIT Image at 42000000 ...
   Using 'conf@1' configuration
   Trying 'fdt@1' fdt subimage
     Description:  Flattened Device Tree blob
     Type:         Flat Device Tree
     Compression:  uncompressed
     Data Start:   0x424a9b50
     Data Size:    40794 Bytes = 39.8 KiB
     Architecture: ARM
     Hash algo:    sha1
     Hash value:   ad706c6614595bdc15aeef10a2e3a35b692466fd
     Sign algo:    sha1,rsa2048:dev
     Sign value:   aaa9a9abdaaa403ee57312bce6f96f443488855492c164a38a5ecb0eb7049
d77fcf217c6bd9b0071e6423c7abe049d362e0af9ef03b6a800a79ae337c00bf26d1f076bf91b459
cc4abb28f851ba948654c94267b4cffb5ccab3a75db37f080ebaf6e3d90e3a3879274d74b1f51041
a2d159d09c7d35b7a61f4d53a1fcb7a40e770b0e21fbcc05ca7afe723a50f09e4f5b31258f5bfecf
f7d26cc446ce1a716c1faac1437cab6081d42e5b0c80e21280dcf10ea9a92b8016a1794fba3b8341
0f2fe2e1d39366d47aa53226768f4ccd00fbbbd423d6c36e12f35e35fa366e3ab94dc93d98ef6582
fb6a78558023330d9675d30459b45913ebc747e6e18137bee2b
   Verifying Hash Integrity ... sha1,rsa2048:dev+ sha1+ OK
   Booting using the fdt blob at 0x424a9b50
   Loading Kernel Image ... OK
OK
   Loading Device Tree to 43ff3000, end 43ffff59 ... OK

Starting kernel ...

[    0.066522] /cpus/cpu@0 missing clock-frequency property
[    0.066551] /cpus/cpu@1 missing clock-frequency property
[    0.239061] bq2429x_charger 1-006b: Failed in reading register 0x0a
[    0.334366] cw201x 1-0062: get cw_capacity error; cw_capacity = 255
[    0.603870] exynos-dsi 11c80000.dsi: xfer timed out: 04 00
[    0.604034] panel-sparkling-eh400wv 11c80000.dsi.0: error -110 reading dcs se
[    0.604245] panel-sparkling-eh400wv 11c80000.dsi.0: read id failed
[    0.655781] samsung,s3fv5rp spi1.1: failed to get regulator
[    1.391744] [TZDEV_ERR]smc_init_monitor:Failed to query SecureOS UUID.
[    1.508164] S5K5EA 8-002d: s5k5ea_i2c_write_twobyte: I2C is not working.
[    1.581216] S5K4ECGA 8-0056: sensor_4ec_i2c_write16: I2C is not working.
[    1.585265] jpeg-hx2 11830000.jpeg: failed to get parent1 clk
[    1.696895] exynos-adc 126c0000.adc: operating without regulator vdd[-19]
[    1.713432] samsung,max_bpp: no property in the node, fb_variant.
[    1.713600] parsing fimd platdata is failed.
[    1.713719] parsing DT for fimd controller is failed.
[    1.714000] device tree parse error system
[    1.773614] dwmmc_exynos 12530000.dwmmc2: tuning err

Welcome to Fedora 22 (Twenty Two)!

[  OK  ] Reached target Encrypted Volumes.


At this point your kernel has been verified and you can be sure that it is one
that you signed. As an exercise, try changing image.fit as in step 5 and see
what happens.


Jaehoon Kim
jh228.kim@samsung.com
25-May-16
